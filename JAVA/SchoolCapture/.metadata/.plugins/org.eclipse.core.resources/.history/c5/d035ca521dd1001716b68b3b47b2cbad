import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.time.temporal.TemporalUnit;
import java.util.StringTokenizer;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

import org.apache.commons.imaging.Imaging;
import org.apache.commons.imaging.common.IImageMetadata;
import org.apache.commons.imaging.formats.jpeg.JpegImageMetadata;
import org.apache.commons.imaging.formats.tiff.constants.ExifTagConstants;
import org.apache.commons.imaging.formats.tiff.constants.TiffTagConstants;

@SuppressWarnings("serial")
public class Loadfile extends JPanel implements DropTargetListener {
	DropTarget dt;
	String filelocaion;
	File path = new File(".");
	File file;
	String filetype = new String();
	String filename = new String();
	StringTokenizer st;// 확장자 분리
	StringTokenizer st2;// 파일명 분리
	InputStream is = null;
	BufferedInputStream bis = null;
	OutputStream os = null;
	BufferedOutputStream bos = null;
	int tempcopy;// 파일복사시 temp
	int status;//파일복사유무 (close 처리)
	int dropstatus;// 드롭 상태
	String taken;
	String [] compare;
	int date;
	int time;
	public Loadfile() {

		dt = new DropTarget(this, DnDConstants.ACTION_COPY_OR_MOVE, this, true, null);
		this.setSize(800, 560);
		this.setOpaque(false);
	}

	@Override
	public void dragEnter(DropTargetDragEvent dtde) {
		if (dropstatus != 1)
			System.out.println("dragEnter");
		dropstatus = 1;
	}

	@Override
	public void dragExit(DropTargetEvent dte) {
		if (dropstatus != 2)
			System.out.println("dragExit");
		dropstatus = 2;
	}

	@Override
	public void dragOver(DropTargetDragEvent dtde) {
		if (dropstatus != 3)
			System.out.println("dragOver");
		dropstatus = 3;
	}

	@Override
	public void drop(DropTargetDropEvent dtde) {

		if (dropstatus != 4)
			System.out.println("dragDrop");
		dropstatus = 4;
		if ((dtde.getDropAction() & DnDConstants.ACTION_COPY_OR_MOVE) != 0) {
			dtde.acceptDrop(dtde.getDropAction());
			Transferable tr = dtde.getTransferable();

			try {
				// 파일명 얻어오기
				@SuppressWarnings("rawtypes")
				java.util.List list = (java.util.List) tr.getTransferData(DataFlavor.javaFileListFlavor);

				// 파일명 출력
				for (int i = 0; i < list.size(); i++)// 드롭된 아이템 갯수만큼 반복
				{
					filelocaion = list.get(i).toString();// 경로불러오기
					System.out.println("file location:" + filelocaion);
					file = new File(filelocaion);
					st = new StringTokenizer(filelocaion, ".");// 확장자만 분리
					while (st.hasMoreTokens())// 마지막 토큰을 반환(확장자)
					{
						filetype = st.nextToken();
					}
					System.out.println("file type:" + filetype);
					st2 = new StringTokenizer(filelocaion, "\\");// 확장자만 분리
					while (st2.hasMoreTokens())// 마지막 토큰을 반환
					{
						filename = st2.nextToken();
					}
					if (filetype.equals("jpg") || filetype.equals("jpeg") || filetype.equals("JPG") || filetype.equals("JPEG"))// 파일
					{
						status = 1;
						System.out.println("image confirmed");

						
						System.out.println("file name :" + filename);

						is = new FileInputStream(filelocaion);// 처리속도 향상
						bis = new BufferedInputStream(is);
						os = new FileOutputStream(path.getAbsolutePath() + "\\UploadedFiles\\" + filename);
						bos = new BufferedOutputStream(os);
						IImageMetadata metadata = Imaging.getMetadata(file);
						if (metadata instanceof JpegImageMetadata) {
						    JpegImageMetadata jpegMetadata = (JpegImageMetadata) metadata;
						    taken = jpegMetadata.findEXIFValueWithExactMatch(ExifTagConstants.EXIF_TAG_DATE_TIME_ORIGINAL).getStringValue();
						}
						compare = taken.split(":");
						//파일 메타데이터 불러오기
						//날짜가 익셉션리스트에 있을경우
						//리스트 내 알고리즘 실행
						//아닐경우 데이터 알고리즘 실행
						//TT서브젝트 과목/복사파일
						String []temp = compare[2].split(" ");
						date = Integer.parseInt(compare[0])*10000+Integer.parseInt(compare[1])*100+Integer.parseInt(temp[0]);//yyyymmdd
						time = Integer.parseInt(temp[1])*10000+Integer.parseInt(compare[3])*100+Integer.parseInt(compare[4]);//hhmmss
						for(int c =0;c<TTdataException.ekscnr.size();c++)
						{
							if(Integer.parseInt(TTdataException.ekscnr.get(c).ExceptedDATE)==date)//예외처리된 날짜중에 찍은 사진이면
							{
								//TTdataException.ekscnr.get(c).runtime
							}
						}
					} else
					{
						String tempoutput = new String();
						System.out.println(filename);
						tempoutput = filename +"은 사진파일이 아니거나 지원하지 않는 확장자입니다.";
						JOptionPane.showMessageDialog(null, tempoutput);// 예외
					}
						

				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			if (status == 1) {
				try {
					is.close();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				try {
					bis.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					os.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					bis.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	@Override
	public void dropActionChanged(DropTargetDragEvent dtde) {
		if (dropstatus != 5)
			System.out.println("dragActionChanged");
		dropstatus = 5;
	}
	
	public void copypic() throws IOException
	{
		while (true)// 파일복사
		{
			tempcopy = bis.read();
			if (tempcopy == -1)
				break;
			bos.write(tempcopy);
		}
	}
}